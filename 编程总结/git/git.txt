git里的origin到底代表什么意思
远程仓库默认被称为origin

在~/.gitconfig文件里进行别名设置
[alias]
    st = status
    ci = commit
    br = branch
    co = checkout
    df = diff

文件.git/index 实际上就是一个包含文件索引的目录树，像是一个虚拟的工作区。在这个虚拟工作区的目录树中，记录了文件名、文件的状态信息（时间戳、文件长度等），文件的 内容并不存储其中，而是保存在 Git 对象库（.git/objects）中，文件索引建立了文件和对象库中对象实体之间的对应。

当对工作区修改（或新增）的文件执行 "git add" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。

当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。
 
当执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。
 
 当执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变。
 
当执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。
 
当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。
 
使用git diff查看各个区之间的差异
git diff 和 git diff --cached容易混淆
 
git diff 比较的是工作区和暂存区的差别
 
git diff --cached 比较的是暂存区和版本库的差别
 
git diff HEAD 可以查看工作区和版本库的差别
 
每次commit后,git diff --cached没有内容，是因为暂存区的内容已经更新到版本库中，因此暂存区和版本库中的内容无差别