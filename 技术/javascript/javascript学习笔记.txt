javascript是基于对象和事件驱动的脚本语言，主要应用在客户端
特点：
交互性
安全性，不允许直接访问硬盘
跨平台性，在浏览器执行，和平台无关


如何定义变量
var 变量名 = 变量值

双引号里可以内嵌单引号，单引号里可以内嵌双引号

除法
两个整数相除，结果为小数，js会保留，跟java不一样


a = 2.3
b = 4.7
c = a + b
alert(c)
结果是7而不是7.0

"12" - 1
结果是11，会将"12"转成整数

"12" + 1
结果是121，加号会进行字符串的拼接

true + 1 
结果是2
false或null是0，非0非null表示true


# 逻辑运算符 && || !(python中 and or not)
c = 4

# 三元运算符
a > b ? 1 : 0
!c  # false


# 判断结构
if(x > 4) {
	alert("4")
} else {
	alert("not 4")
}

# 选择结构
switch(x){
	case "ddd":
		alert("ddd")
		break;
	default:
		alert("default")
}

# for循环
for(var x = 0; x < 3; x++) {
	document.write("x=="+x);
}

# while循环
while(x < 10){
	document.write("x=" + x + "<br/>")
}


# 函数细节问题
javascript中只要使用函数的名称就是对函数的调用，不存在重载形式，举例如下
每个函数中有一个数组对传入的参数进行存储，它就是arguments
function show(x, y) {
	alert(x + ":" + y);
	alert(arguments.length)
}

js中函数也是一个对象，可以将其引用传给其他变量

# 动态函数
函数的参数和函数体都是可以动态指定的

# 数组
var arr = []  或 var arr = new Array()
var arr = [2, 23, 14, 48];
数组的长度可变，元素的类型是任意的


# 获取具体的值的类型，可以通过typeof来完成，typeof返回的类型都是字符串的
string number boolean


# 全局变量，局部变量

在脚本中定义的是全局变量，在函数中定义的变量是局部变量

for(var x=0; x<3; x++)
{
	document.write("x=" + x);
}
document.write("x="+x);

# Object
var dt = new Date()
alert(dt.toLocaleString())


# String
prototype

String.prototype.mytrim = function()
    {
        var start = 0
        var end = this.length-1
        while(start<=end && this.charAt(start) == ' ')
        {
            start ++;
        }
        while(start<=end && this.charAt(end) == ' ')
        {
            end --;
        }
        return this.substring(start, end+1)
    }

# Array
concat 将一个数组或字体串加到另外一个数组中去，并返回新的数组
join(separator)
将数组拼接成字体串，接收一个参数，用于分割每个数组元素
pop() 移除数组中最后一个元素并返回该元素
push() 将一个元素添加到一个数组中去，并返回新数组的长度
reverse()
shift() 移除数组中第一个元素并返回该元素
unshift() 将指定元素插入数组开始位置并返回新数组的长度

unshift 和 pop 结合可实现先进先出的效果
unshift 和 shift 结合可实现后进先出的效果
slice(start, end) 返回一个数组的一段数据

如果还需要特定方法，可以自己扩展，获取到Array.prototype然后进行新功能的添加

# 月份和星期
js里用0到11表示1到12月份
用0到6表示周日、周一... 周六

var date = new Date()
date.getYear()
date.getMonth()
data.getDate() 本月第几天
date.getDay() 获取星期
date.getTime() 日期对象的毫秒值

# 简化对象调用的书写
with(arr)
{
	sort()
	reverse()
}


# Math
var randomNum = parseInt(Math.random()*10 + 1)